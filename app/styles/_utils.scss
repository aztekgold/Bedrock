
.dark{
  color: #fff; // ? rgba(255,255,255,0.8)
}

// Borders
.line        { border: 1px solid rgba(0,0,0,0.15); } //var
.line-top    { border-top: 1px solid rgba(0,0,0,0.15); }
.line-right  { border-right: 1px solid rgba(0,0,0,0.15); }
.line-bottom { border-bottom: 1px solid rgba(0,0,0,0.15); }
.line-left   { border-left: 1px solid rgba(0,0,0,0.15); }

.dash-line        { border:1px dashed rgba(0,0,0,0.15); }
.dash-line-top    { border-top:1px dashed rgba(0,0,0,0.15); }
.dash-line-right  { border-right:1px dashed rgba(0,0,0,0.15); }
.dash-line-bottom { border-bottom:1px dashed rgba(0,0,0,0.15); }
.dash-line-left   { border-left:1px dashed rgba(0,0,0,0.15); }

.dark *[class*="line-"],
.dark *[class*="dash-line"]{
  border-color: rgba(255,255,255,0.2); //var
}

// Absolute containers
.pin-l,
.pin-t,
.pin-r,
.pin-b,
.pin-tl,
.pin-tr,
.pin-bl,
.pin-br {position:absolute;}
.pin-b { right:0; bottom:0; left:0; }
.pin-t    { top:0; right:0; left:0; }
.pin-l   { top:0; bottom:0; left:0; }
.pin-r  { top:0; right:0; bottom:0; }
.pin-br { bottom:0; right:0; }
.pin-bl  { bottom:0; left:0; }
.pin-tr    { top:0; right:0; }
.pin-tl     { top:0; left:0; }

// Fixed containers
.stick-t,
.stick-r,
.stick-b,
.stick-l,
.stick-tl,
.stick-tr,
.stick-bl,
.stick-br { position:fixed; }
.stick-b { right:0; bottom:0; left:0; }
.stick-t    { top:0; right:0; left:0; }
.stick-l   { top:0; bottom:0; left:0; }
.stick-r  { top:0; right:0; bottom:0; }
.stick-br { bottom:0; right:0; }
.stick-bl  { bottom:0; left:0; }
.stick-tr    { top:0; right:0; }
.stick-tl     { top:0; left:0; }

.left               { float:right; }
.right              { float:left; }
.unfloat            { float:none; }
.quiet              { color:#7f7f7f; color: rgba(0,0,0,.5); } //temp
.dark .quiet        { color: #7f7f7f; color: rgba(255,255,255,.5); } //temp
.rel                { position:relative; }
.abs                { position:absolute; }
.clip               { overflow:hidden; }
img.inline, .inline { display:inline-block; }
.break-word         { word-wrap:break-word; }
.align-middle       { vertical-align: middle;}
.align-top          { vertical-align: top;}
.block              { display:block; }
.scroll-h           { overflow-x:auto; }
.scroll-v           { overflow-y:auto; }
.z1                 { z-index:1; }
.z10                { z-index:10; }
.z100               { z-index:100; }

@include ratio(1,1);
.square             { @extend .ratio-1x1; }
.circle             { border-radius: 50%; }
.round              { border-radius: $main-radius; } //var
.round-t            { border-radius: $main-radius $main-radius 0 0; }
.round-r            { border-radius:0 $main-radius $main-radius 0; }
.round-b            { border-radius:0 0 $main-radius $main-radius; }
.round-l            { border-radius: $main-radius 0 0 $main-radius; }
.round-tl           { border-top-left-radius: $main-radius;}
.round-bl           { border-bottom-left-radius: $main-radius;}
.round-tr           { border-top-right-radius: $main-radius;}
.round-br           { border-bottom-right-radius: $main-radius;}
.shadow             { box-shadow: 0 0 25px 0 rgba(0,0,0,0.15); } //var
.noevents           { pointer-events: none;}
.abs-center{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
}

.cover{
  position: absolute;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
}

.overlay{
  position: fixed;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
}

.overlay-dark{
  @extend .overlay;
  background-color: rgba(0,0,0,0.5);
}

.overlay-light{
  @extend .overlay;
  background-color: rgba(255,255,255,0.5);
}

.truncate {
    text-overflow:ellipsis;
    white-space:nowrap;
    overflow:hidden;
}

.text-left          {text-align: left;}
.text-right         {text-align: right;}
.text-center        {text-align: center;}
.text-justify       {text-align: justify;}
.text-nowrap        {white-space: nowrap;}
.text-lowercase     {text-transform: lowercase;}
.text-uppercase     {text-transform: uppercase;}
.text-capitalize    {text-transform: capitalize;}
.text-italic        {font-style: italic;}
.text-hide {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

.label:empty {
  display: none;
}

.center-block {
  display: block;
  margin-right: auto;
  margin-left: auto;
}

.vertical-align{
  display: table;
  width: 100%;
  height: 100%;
  padding: 0;
  >div{
   display: table-cell;
   vertical-align: middle;
  }
}

.table        {display: table;}
.table-cell   {display: table-cell;}
.hide         {display: none !important;}
.show         {display: block !important;}
.invisible    {visibility: hidden;}

%clearfix{
  @include clearfix;
}

.cf{
  @extend %clearfix;
}

.img-responsive{
  display: block;
  max-width: 100%;
  height: auto;
}

// Margin' & Padding'
// Find a solution to adapt by breakpoint
// Takes up a lot of space

.p0{padding: 0 !important;}
.pt0{padding-right: 0 !important;}
.pb0{padding-right: 0 !important;}
.pl0{padding-right: 0 !important;}
.pr0{padding-right: 0 !important;}
.px0{@include padding-x(0 !important);}
.py0{@include padding-y(0 !important);}

@for $i from 1 through 10{
  .p#{$i}{padding: 10px*$i;}
  .pt#{$i}{padding-right: 10px*$i;}
  .pb#{$i}{padding-right: 10px*$i;}
  .pl#{$i}{padding-right: 10px*$i;}
  .pr#{$i}{padding-right: 10px*$i;}
  .px#{$i}{@include padding-x(10px * $i);}
  .py#{$i}{@include padding-y(10px * $i);}
}

.m0{padding: 0 !important;}
.mt0{padding-right: 0 !important;}
.mb0{padding-right: 0 !important;}
.ml0{padding-right: 0 !important;}
.mr0{padding-right: 0 !important;}
.mx0{@include padding-x(0 !important);}
.my0{@include padding-y(0 !important);}

@for $i from 1 through 10{
  .m#{$i}{padding: 10px*$i;}
  .mt#{$i}{padding-right: 10px*$i;}
  .mb#{$i}{padding-right: 10px*$i;}
  .ml#{$i}{padding-right: 10px*$i;}
  .mr#{$i}{padding-right: 10px*$i;}
  .mx#{$i}{@include padding-x(10px * $i);}
  .my#{$i}{@include padding-y(10px * $i);}
}

.light-mask::after,
.dark-mask::after{
    position: absolute;
    top: 0;
    right: 0;
    z-index: 1;
    width: 100%;
    height: 100%;
    content: "";
    transition: opacity 0.3s;
    opacity: 0.6;
}

.light-mask::after{    background-color: #c3c7cb;} //var
.dark-mask::after{    background-color: rgb(73, 73, 73);} //var

.full-width{width: 100%;}
.full-height{height: 100%;}
.h100{height: 100vh;}
.w100{width: 100vw;}

// Maybe move to reset file?
blockquote:before,
blockquote::after{
  content: ' " ';
}

.limiter{
  max-width: 1000px;
}

.blend-multiply       { mix-blend-mode: multiply; }
.blend-screen         { mix-blend-mode: screen; }
.blend-overlay        { mix-blend-mode: overlay; }
.blend-darken         { mix-blend-mode: darken; }
.blend-lighten        { mix-blend-mode: lighten; }
.blend-color-dodge    { mix-blend-mode: color-dodge; }
.blend-color-burn     { mix-blend-mode: color-burn; }
.blend-hard-light     { mix-blend-mode: hard-light; }
.blend-soft-light     { mix-blend-mode: soft-light; }
.blend-difference     { mix-blend-mode: difference; }
.blend-exclusion      { mix-blend-mode: exclusion; }
.blend-hue            { mix-blend-mode: hue; }
.blend-saturation     { mix-blend-mode: saturation; }
.blend-color          { mix-blend-mode: color; }
.blend-luminosity     { mix-blend-mode: luminosity; }

.blend-multiply-bg    { background-blend-mode: multiply; }
.blend-screen-bg      { background-blend-mode: screen; }
.blend-overlay-bg     { background-blend-mode: overlay;}
.blend-darken-bg      { background-blend-mode: darken;}
.blend-lighten-bg     { background-blend-mode: lighten;}
.blend-color-dodge-bg { background-blend-mode: color-dodge;}
.blend-color-burn-bg  { background-blend-mode: color-burn;}
.blend-hard-light-bg  { background-blend-mode: hard-light;}
.blend-soft-light-bg  { background-blend-mode: soft-light;}
.blend-difference-bg  { background-blend-mode: difference;}
.blend-exclusion-bg   { background-blend-mode: exclusion;}
.blend-hue-bg         { background-blend-mode: hue;}
.blend-saturation-bg  { background-blend-mode: saturation;}
.blend-color-bg       { background-blend-mode: color;}
.blend-luminosity-bg  { background-blend-mode: luminosity;}
